{\rtf1\ansi\ansicpg1252\deff0\deflang1033\deflangfe1033{\fonttbl{\f0\fmodern\fprq1\fcharset0 Courier New;}}
{\colortbl ;\red255\green0\blue0;\red0\green0\blue255;\red0\green128\blue0;\red0\green77\blue187;}
{\*\generator Msftedit 5.41.21.2510;}\viewkind4\uc1\pard\nowidctlpar\tx4320\b\f0\fs18 AML - A Modular Language.\b0  A declarative-first foundation for building declarative languages for .NET. Specialized for different languages through a Language Module (LM). The language is lexically-scoped and strongly dynamically-typed. As much as possible, it is built to enable automated refactoring and reasoning about programs. It features a highly-simplified lisp-style condition system for imperative error handling (called 'interventions').\par
\par
\ul Text Color Key\par
\cf1\ulnone\par
\cf0 Normal text means implemented or mostly so.\cf1\par
Red text means the described feature is not yet implemented.\par
\cf2 Blue text demarcates the developer's 'note to self' (feel free to ignore).\cf0\par
\par
\ul Syntax Overview\ulnone\par
\par
; blah\tab Line comment.\par
#| blah \cf1 #| blah |#\cf0 |#\tab Multiline comment \cf1 (nests)\cf0 .\par
\par
(fn 5)\tab Function application (AKA, operation).\par
[ade tim 10]\tab Declaration.\par
\{a :b "c"\}\tab Meta expression.\par
\par
()\tab Unit.\par
#t\tab True.\par
#f\tab False.\par
:thing\tab Lisp-like keyword.\par
:e/fnName\tab Semantic keyword (here a function name). Needed for automated refactoring to include keyword names.\par
\par
5(i)\tab Int (32-bit). Inexact.\par
5g\tab Long (64-bit). Inexact.\par
5.0(f)\tab Float (32-bit). Inexact.\par
5.0d\tab Double (64-bit). Inexact.\cf1\par
5m\tab Money type. Inexact.\par
5n\tab Native integer. Inexact.\par
5b\tab BigInt (arbitrary size). Exact.\par
10/3\tab Ratio (arbitrary size). Exact.\cf0\par
\par
(ref 5)\tab Build a ref cell with a value of 5.\par
(get r)\tab Get a ref value.\par
(set! r 10)\tab Set a ref value (functions that mutate externally-visible state should end with a bang!)\par
(while! expr expr2)\tab While loop.\par
(steps! expr expr2 ... exprN)\tab Steps (like Lisp progn).\par
==\tab Reference identity equality (or if made into a protocol signature later, simple identity equality).\par
/==\tab Reference identity inequality.\par
\par
a.b\tab Selector.\par
a::b\tab Left-associative selector (binds 'tighter' than dot selector).\par
\par
"string"\tab String.\par
#"verbatim\\string"\tab Verbatim string.\par
\\"c"\tab Character.\par
 \par
(list 1 2 3)\tab List.\par
(array 1 2 3)\tab Array. Indexed as a.0 or (select 0 a). NOTE: arrays are IMMUTABLE. To achieve mutation, build an array of refs.\par
(composite (a 1) (b "str") (c \\"c"))\tab Composite. Indexed as s.a or (select :m/a s).\par
(extend c (a 5) (b 6))\tab Extend a composite with additional members.\par
\par
(fun (x) pre: expr post: expr body)\tab Lambda with optional contract predicates.\par
\par
\cf1 ~x\tab Shadowed symbol. NOTE: two args created with the same name and by the same frame are considered 'pseudo-shadowing', and cannot be de-shadowed in this way (or any way).\par
\cf0 (doc :e/=)\tab Query an entry\rquote s documentation comment.\par
(= a b)\tab Value equality.\par
(equal a b)\tab Structural equality.\par
\par
$ % & @ \{ \}\tab Reserved for LM usage.\par
\par
[usingFile "c:/sim.dol" reload: #t lm: :l/dol]\tab Evaluate a file, optionally only once per program, optionally with eval by a given LM (here DOL).\par
[usingLanguage "c:/..." "MyLM"]\tab Configure the environment with a LM. Creates only one LM per environment. Additional uses are ignored.\par
[usingModule ...] | CapitalizedSymbols\tab Reserved for module use (if it gets impl'd).\par
\par
\cf1 [importLanguage ...]\tab Imports a language for use with the import syntax.\par
[:l/dol object ...]\tab A declaration expression in an imported LM (here DOL). Nested expressions also use the LM. AML environment is shared. [:l ...] simply uses the LM specified by [usingLanguage ...].\par
(:l/dol fn ...)\tab An application expression in an imported LM.\par
\{:l/dol on ...\}\tab A meta expression in an imported LM.\par
\cf0\par
[def v 10]\tab Variable definition.\par
[def fn [x] (* x 2)]\tab Function definition.\par
[struct thing [ah ge zi] req: expr]\tab Structure definition with optional construction contract. Created as (thing x y z) once declared.\par
\par
(type 5)\tab Gets the structure that describes a value, structure or function. In this case, a list structure is returned.\par
(typeName aThing)\tab Gets the type name of a structure or function that can be passed to the type function.\par
(typeOf :t/list)\tab Gets the type structure of a type by its name.\par
\par
?quit\tab ? starts a repl message. Here '?quit' quits the repl. Repl messages take args between spaces, and cannot nest. Args must be literals.\par
?redeclaration [on | off]\tab Turn the ability to redeclare declarations on and off.\cf3\par
\cf1 (| |) [| |] \{| |\} .. with union \cf0 ` ' , _\tab Reserved for future use. With would be like ML's \{ v with x = v.y \}. Union would be for a sum type definition (with violations on incomplete matches). Perhaps .. could be useful for some sort of range syntax, or something.\par
|\tab No use (would disallow (||) and similar syntaxes otherwise).\par
\pard\nowidctlpar\par
\ul Notes\ulnone\par
\par
Application evaluation can only be specialized to prefixed custom symbols and have additional functions.\par
\par
Declaration evaluation can be mostly specialized. Declarations never return values as they merely augment the global environment. Must be read at top-level or nested in other declarations or a language specifier in a declaration.\par
\par
Meta expression evaluation is either entirely specialized or unused.\par
\par
Macros are not included as the LM is how languages are specified. However, enough syntax \i is\i0  reserved for them. ` is reserved for quote, ' for unquote, and #' for pound-quote (like lisp at-quote).\par
\par
First class continuations are not to be included.\par
\par
Like in F#, primitive types do not automatically promote and must be converted manually.\par
\par
There are 'abstracting' args that automatically wrap an argument's expression in a lambda (thus avoiding dynamic capture) via <|arg|> syntax. Function declarations with labeled args like in Lisp are available via smalltalk-like syntax via 'arg: value'. Also available are variadic args via arg... syntax. Note that currently none of arg specializations can be combined (no labeled abstracting args, no abstracting variadic args, and so on). Also, functions must have their args defined in order of 1) optionally mixed normal args and / or abstracting args, 2) labeled args, then by 3) a single variadic arg. When calling a function, args must be specified in the order they are declared in the function, even if they're labeled.\par
\par
A structure name is :t/nameOfStructure, a variable name is :e/nameOfVariable, a function name is :e/nameOfFunction, a composite name is :composite, a lambda name is :fun, a primitive name is :nameOfPrimitive, and so on.\par
\par
For convenience and simplicity, let is always sequential like let* in CL.\par
\par
\ul Contracts\ulnone\par
\par
Code contracts are available on lambdas (and thus functions). Contracts use predicates to test whether a function call is valid. Note that there is a build of AML that is \lquote optimized\rquote  and does not check user-defined contracts at all.\par
\par
One thing that contracts enforce out of the box is that improper lists cannot be created. If cons receives a non-list as the second parameter, it will propagate a violation.\par
\par
Contracts signal errors in code through \i violations\i0  \endash  there are no exceptions or the like. Violations can be incurred manually with the \i violation\i0  syntax.\par
\par
Violations never pop off the stack; instead they propagate automatically for any operation except 'attempt'. This means a built-in 'cond' function will propagate a violation if none of its cases are used. Violations describe the issue that propagated the violation, and may carry additional data.\par
\par
Any time a built-in operator (other than 'attempt') receives a violation, it will propagate that violation. \i This eliminates all unnecessary manual error handling in AML\b\i0 .\b0  Violations can be handled by the user with the \i attempt\i0  syntax -\par
\par
(attempt\par
    (causesViolation)\par
    (:v/eval "Handle eval violation.")\par
    (:v "Handle any violation."))\par
\par
Violations can come with data that is accessible in an attempt branch. Here we have violation data that is a composite with a member called 'name' -\par
\par
(attempt\par
    (causesViolationWithData)\par
    (:v/violationWithData data.name))\par
\par
If none of the attempt branches match a violation, the violation is simply propagated upward.\par
\par
To handle a contract failure violation, do like so -\par
\par
(attempt\par
    (causesContractViolation)\par
    (:v/contract (doSomething)))\par
\par
Further, custom code can be used to imperatively intevene in the creation of matching violations with the \i intervene\i0  syntax -\par
\par
(intervene\par
    (causesViolation)\par
    (:v/eval problem); Intervene on eval violation, returning the original violation.\par
    (:v/reader problem hide: #t); Intervene on a reader violation, returning the original violation, and hide the violation from further intervention.\par
    (:v (violation ":v/x" "y" ()))); Intervene on any violation, returning a new violation.\par
\par
Intervention sets up expression to be evaluated when the matching violation is created in the call stack. If the matching vioation is created, the result of the expression is returned instead of the newly created violation down in the calling code.\par
\par
\cf2 TODO: consider implementing a hide syntax like -\par
\b (hide :v/x (computeSomething))\b0\par
- that is semantically equivalent to -\par
\b (intervene (computeSomething) (:v/x problem hide: #t))\par
\b0 Attempt branches could even have a hide: arg, too.\cf0\par
\par
\ul Protocols\ulnone\par
\par
Protocols describe a set of values that are compatible with a set of functions. Protocols afford built-in data-directed programming a la SICP. Protocols can 'inherit' from other protocols by using constraints. Protocols may also allow default function implementations in terms of its signatures similar to Haskell's type classes, but this could probably be implemented later.\par
\par
Lists, arrays, and other collections all have an instantiation under the sequence protocol. A protocol uses a set of functions signatures to implement structure-specific behavior to form an abstraction. For example, (peek (next (list 1 2 3))) yields 2, as does (peek (next (array 1 2 3))), and so on. The concrete map and filter functions operate on the sequence protocol.\par
\par
Here are the required protocol definitions for sequences -\par
\par
[protocol sequence [a]\par
    [sig next [a]]\par
    [sig peek [a]]\par
    [sig isDone [a]]]\par
\par
The car and cdr function signatures form the formation protocol, and are instantiated over list and pair structures with an \i instance\i0  out of the box. An instance is how a protocol is instantiated over types of values. Here's a hypothetical implementation. \i Note this is no longer how the stdlib does it!\i0  -\par
\par
[protocol formation [a]\par
    [sig car [a]]\par
    [sig cdr [a]]]\par
\par
[structure pair [left right]]\par
\par
[instance formation [[p]] where: [[list p]]\par
    [def car [p] p.left]\par
    [def cdr [p] p.right]]\par
\par
[structure list [head tail] where: [[list s.tail]]]\par
\par
[instance formation [[xs]] where: [[list xs]]\par
    [def car [xs] xs.head]\par
    [def cdr [xs] xs.tail]]\par
\par
That a value supports a protocol is queried by (hasProtocol aProtocol aValue). A value does not have a protocol if does not have an instance of the protocol argument. For protocols, a function signature is defined as its name and number of arguments. Instances must have definitions for all their protocol signatures, or else it's a violation.\par
\par
You can NOT declare an instance by constraining multiple arguments to a protocol like so -\par
\par
[protocol p [v s]\par
    [sig f [v s]]]\par
\par
[instance p [[v s]] where: [[q v s]]\par
\pard\nowidctlpar\tx4320     [def f [v s] expr]]\par
\par
Protocol signatures may use only normal args.\par
\par
\cf1\ul Compiler\ulnone\par
\par
For efficiency, AML has a compiler that is similarly pluggable as the language itself. Just as AML has LM plug-ins, the compiler (AMLC) has LMC plug-ins. Both LMs and LMCs must be written by the end user if he wishes to have a compiling language \cf2 (however there may be a way to have compiled AML code called out to uncompiled LM code, so maybe a missing LMC would not disallow compilation)\cf1 . Initially, the compiler will produce untyped code. Later, as time permits, it will produce some typed code leveraging explicit and inferred constraints. Finally, it will work along-side the symbolic evaluator to strip out contracts where proven enforced at compile-time. Whole program optimization a la SML would also be nice :)\cf0\par
\par
\cf1\ul Editing / Debugging:\ulnone\par
\par
AML uses Visual Studio as an editor and debugger.\cf0\par
\pard\nowidctlpar\par
\ul Sample AML Code\ulnone\par
\par
[def double [x] (* x 2)]; better than using def and fun\par
\par
[def sumOfSquares [x y]\par
    (let (square (n) (* n n))\par
         (x2 (square x))\par
         (y2 (square y))\par
         (+ x2 y2))]\par
\par
[def main [args]\par
    (sumOfSquares (length args) 23)]\par
\par
To see LOTS more good sample AML code, read the Stdlib files :)\par
\par
\cf1\b DAL - Declarative Attribute Language\cf0 .\b0  DAL will be the first LM available for AML. DAL is a declarative-first language for implementing interactive systems like UIs and simulations. \i Unlike OOP, attributes do not use messages but rather transform through time depending on the state of the world around them.\par
\pard\nowidctlpar\tx4320\i0\par
\ul Syntax Overview\ulnone\par
\par
[attribute ...]\tab Describes a single attribute.\par
[group ...]\tab Describes a group of attributes.\par
\pard\nowidctlpar\tx4331 [collection ...]\tab Describes a collection of attributes.\par
\pard\nowidctlpar\tx4320 [repeater ...]\tab Describes a collection of attributes whose number is parameterized and whose parameters are iteratively specified.\par
[source ...]\tab Describes a single source.\par
[transient ...]\tab Describes a transient source.\par
\pard\nowidctlpar\tx4331 [spawnlet ...]\tab Describes a spawnlet source.\par
\par
\{info ...\} |\par
\{origin ...\} |\par
\{previous\} |\par
\{instant ...\} |\par
\{instantRandom\} |\par
\{first ...\} |\par
\{firstRandom\}\tab Passive attribute calculation expression.\par
\par
\{base\} |\par
\{value ...\} |\par
\{yield ...\} |\par
\{tally ...\} |\par
\{aggregate ...\}\tab Active attribute calculation expression.\par
\par
\{get $joe.x\} |\tab\cf4 Is this the same as \{instant ...\}?\cf0\par
\{set! $joe.x propagate: #t\} |\par
\{update! $joe.x inc propagate: #f\}\tab Attribute get / set / update expressions with optional non-propagation.\par
\par
$jim.age\tab Literal address of jim's age attribute (literal addresses are expanded where they are encountered).\par
$any.actor.x\tab Literal address of x attribute of any object with an actor attribute.\par
\par
%my.x\tab Relative address of my x (relative addresses are expanded when they are evaluated).\par
%parent.x\tab Relative address of parent's x attribute.\par
%desc.x\tab Relative event descriptor address of x attribute. \par
%origin.x\tab Relative event descriptor address of attribute x.\par
\par
\{res level1 tree\}\tab Resource where level1 is the resource package and tree is the resource.\par
\ul\par
\pard\nowidctlpar Components\par
\ulnone\par
Through a declarative syntax, 'DAL components' can be registered with DAL. These components expose special built-in attributes, and have the ability to automatically side-effect outward purely by merit of their existence (such as sending drawing instructions to a video buffer) and to be separately affected inward (such as synchronization to the results of a separate physics engine, or updating state as a result of an input device).\par
\par
Attributes that use a component\rquote s special built-in attributes dictate the component\rquote s side effects. Sprites, sounds, songs, display windows, and physics bodies may all have built-in attributes that are instantiated at run-time that have special semantics for their respective component.\par
\par
Outward side-effecting of separate components can be optionally parallelized to run beside one another. Inward side-effecting of separate components cannot be parallelized but can be ordered via some manner of declarative specification.\par
\par
\ul Hypothetical DAL Code\ulnone\b\par
\b0\par
[def gravity (v2 0f -9f)]\par
\par
[group transformation []\par
    [[attribute position v2Zero]\par
     [attribute scale v2One]]]]\par
\par
[group actor [translation]; describes an actor as a group of attributes with a translation parameter\par
    [[source transform [asGroup transformation [[attribute position (+ (v 1f 1f) translation)]]]]\par
     [attribute mass 100f]; attribute mass left at this default doesn't get serialized\par
     [attribute actorsCreated \{tally $any.actor.creation\}]]]\par
\par
[group screen []\par
    [[attribute localActor [source actor [(v2 5f 5f)]]]\par
     [collection actors\par
         [[item $anActor]\par
          [item %my.localActor]\par
          [item [source anotherLocalActor [asGroup actor [(v2 5f 5f)]]]]]]]]\par
\par
[newGroup physicalActor []\par
    [asGroup actor [(v2 2f -2f)]\par
        [[attribute transform\par
             [[attribute position\par
                  (sum \{base\}\par
                       \{aggregate $global.tick (+ state gravity) v2Zero\}\par
                       \{aggregate %my.collision (+ state (v2Of (* \{info %desc.force\} 0.5)) v2Zero\})]]]\par
                       ; aggregate's body expression gets three implicitly-bound variables; 'value', 'oldValue', and 'state'. Events that come from components have a descriptor value with arbitrary members pertinent to the event's specifics (such as '%desc.normal' for a collision normal).\par
\par
[source anActor [asGroup physicalActor []]]; declaratively instantiates an actor attribute with name anActor for the life of the program\par
\par
[source aScreen\par
    [asGroup screen\par
        [[collection actors\par
             [[item [source anotherActor [asGroup actor [(v 3f 4f)]] ...]]]]]]]\par
\par
[spawnlet anonymous\par
    [when \{value $player.shoot\}]; object spawns whenever condition is met\par
    [while; object exists only while this condition is met\par
        (and (< \{tally $global.tick\} 1000)\par
             (not \{value %my.collision\})))]]]\par
    [asGroup bullet\par
        [[attribute position\par
            (+ \{instant $player.transform.position\}\par
               (v2 0f \{aggregate $global.tick (+ state bulletSpeed) 0f\}))\par
            updateLimit: 1]]; updateLimit limits the number of times an attribute can be updated per tick - useful for breaking update cycles\par
\par
[source currentScore\par
    [asAttribute intValue\par
        \{aggregate $any.enemy.health (+ state \{instant %origin.points\}) 0 when: (= (instant %origin.health\} 0)\}]]]\par
\par
[usingComponent "c:/..." "MyLM"]\par
\par
[group reactionExamples []\par
    creationReaction: (print! "group created!\\n")\par
    destructionReaction: (print! "group destroyed!\\n")\par
    [[attribute x 0 reaction: (print! "x changed!\\n")]\par
     [attribute y 0 reaction: \{update! %my.x inc\}]\par
     [attribute z 0 reaction: (print! "z changed!\\n")]]]\par
\par
\ul Notes\ulnone\par
\par
If an attribute is referenced that does not exist, a violation structure is propagated upward. Violations from calculation expressions are ignored, so this does not cause damage to the running program. This eases interactive testing of independent attributes.\par
\par
Resource expressions are programmatically reasoned about to guide the creation of resource packages. Additionallty, the interpreter can dynamically load or discard resource packages from memory depending on when it should be available for use.\par
\par
As attributes change through time, they must keep a copy of the value of the type they are defaulted to in their class. This will keep attributes from taking on values that have different types.\par
\par
It would make tremendous amounts of sense to have versioning on attributes, and to have a syntax for specifying automatic conversion of loaded attributes.\par
\par
Simulations can be written out perfectly at any time to DAL code. Some limitations may initially apply, such as discarding ongoing event handling contexts. Since there is possibility of imperative code, serialization hooks must be available to allow the user to specify additional serialization handling.\par
\par
It seems like DAL should be able to be automatically networked for multiple interactive users. Will likely need hooks like serialization.\par
\par
\cf1\b GOLORP - A Prolog-like language implemented as a LM.\cf0\b0\par
\par
\ul Syntax Overview\ulnone\par
\par
\pard\nowidctlpar\tx4320 $v\tab GOLORP variable name.\par
[fact xyz [...]]\tab Fact about a relationship.\par
[rule xyz [...] [...]]\tab Rule about a relationship.\par
\{query ...\}\tab Unification.\par
(glist 1 2 3)\tab GOLORP list. \par
(garray 1 2 3)\tab GOLORP array.\par
(gcomposite (a 1) (b "str") (c \\"c"))\tab GOLORP composite.\par
\pard\nowidctlpar\par
\ul Sample GOLORP Code\ulnone\par
\par
[fact cat [lion]]\par
\par
[fact cat [tiger]]\par
\par
[rule dorothy [$x $y $z]\par
  [\{equal $x lion\}\par
   \{equal $y tiger\}\par
   \{equal $z bear\}]]\par
\par
[rule twinCats [$x $y]\par
  [\{cat $x\}\par
   \{cat $y\}]]\par
\par
\{dorothy lion tiger bear\}\par
> (gcomposite truth: yes vars: (gcomposite))\par
\par
\{dorothy $one $two bear\}\par
> (gcomposite truth: yes vars: (gcomposite one: lion two: tiger))\par
\par
\cf1\b TSL - Transactional Statement Language.\cf0\b0  A transactional statement language such as for shell programming implemented as a LM.\par
\pard\nowidctlpar\tx4320\par
\ul Syntax Overview\ulnone\par
\par
[transaction xyz ...]\tab Defines a transaction block.\par
\{doSomething "xyz"\}\tab Transactional statement (allows side-effects that can be undone).\par
\par
\ul Notes\ulnone\par
\par
Transactional statements always returns :success, :failure, :skipped, or :rollbackAborted.\par
\pard\nowidctlpar\par
\ul Hypothetical TSL Code\ulnone\par
\par
[new counter 0]\tab\tab\tab\tab ; create a transactionally mutable variable. It can be rolled back after setting\par
\par
[transaction makeMyFile [myDir myFile]\tab ; executes statements in order, undoing them if a later one fails.\par
  [\{makeDir myDir\}\tab\tab\tab\tab ; skipped if myDir already exists, with roll-back doing nothing\par
   \{change counter (inc counter)\}\par
   \{changeDir myDir\}\par
   \{++ counter\}\tab\tab\tab\tab ; \{++ ...\} is a simpler way to increment a variable than \{change ... (inc ...)\}\par
   \{makeFile myFile "Hello, file!"\}\tab ; skipped if myFile already exists and has exactly the "Hello, file!" contents\par
   \{++ counter\}]]\par
\par
\{makeMyFile "c:/myDir" "c:/myFile"\}\tab ; executes the transaction\par
\par
#| counter will be either 0 or 3 here, and file transactions will have either completed entirely or had no effect, except in the extremely rare case of :rollbackAborted. |#\par
\par
\cf1\b DWF \endash  Declarative Windows Forms.\cf0\b0  Allows Windows Forms applications to be written in a declarative style, similar to WPF, but should be much simpler if strictly less flexible (which is fine for most uses). Implemented as a component for the DAL LM.\par
\cf1\par
\b DRL - Declarative Rendering Language.\cf0\b0  Describes how to render DAL attributes of the relevant attributes. It is a component for the DAL LM. Attributes in DRL represent XNA rendering primitives and behaviors. DRL uses existential declaration to \lquote skin\rquote  matching attributes with visuals. So in pseudo code \endash  \lquote where $player exists, red ship with position = player.position\rquote .\par
\par
\cf1\b DAUDL - Declarative AUDio Language.\cf0\b0  Like DRL but for XACT audio.\par
\par
\b Alternative Design for AML\b0  - As AML's design and implementation has progressed, one alternative design has emerged. AML could be designed with an inferred, static type system. This could allow for compiling much faster code with less tooling. An ML-style static type system could do a lot to help generate practical code for LM used in / for real-time systems. If and how such a strict type system would compromise the flexibility of - and increase the workload for - LM authors is unknown... and may not be practical / desirable.\par
\par
Here also is an alternative syntax where:\par
* application is like ML except that newline + indentation (or successive newline) inverts right-associativity\par
* declaration is like application except the first expr in the series is post-fixed with colon\par
\pard\nowidctlpar\tx4860 * meta-expression is like declaration except post-fixed with bang\par
* parens are used only for grouping and unit, and can be used in any kind of expression\par
* redundant grouping parens can be elided\par
* operators are infix and work like ML\par
* package keys are post-fixed with question mark\par
* lambdas use the => syntax, such as 'x => x * 2'\par
* uttering function names without application uses hash prefix\par
\pard\nowidctlpar\par
Here are examples -\par
\par
def: sum (nums) where? (sequence nums)\par
  doc? "Sum a sequences of values."\par
  reduce #+ nums\par
\par
defRec: foldRight (folder state seq) where? ((fun folder) (sequence seq))\par
  doc? "Perform a right-associative fold over a sequence. NOTE: this function is not currently tail-recursive."\par
  if\par
    isDone seq\par
    state\par
    let\par
      elem (peek seq)\par
      nextSeq (next seq)\par
      nextState (foldRight folder state nextSeq)\par
      folder elem nextState\par
\par
object: anonymous\par
  class: bullet\par
  while: value! player.shoot && tally! global.tick < 1000 && not (value! my.collision))\par
  attributes:\par
    position: value! player.transform.position + (v2 0f (aggregate! global.tick (+ state bulletSpeed) 0f))\par
    ; and so on...\par
\par
object: currentScore\par
  class: intValue\par
  attributes:\par
    value:\par
      aggregate! any.enemy.health (+ state source.points) 0 when? source.health = 0\par
\par
Here\rquote s a more java-like syntax which might be better if the type system stays dynamic. The meaning of a bracket, paren, or curly depends on whether it is post-fixed to a symbol. If it is, it\rquote s a call, otherwise, it\rquote s a grouping. Precedence tightening is not done with parens, but with banana clips, such as (|1 + 2|) * 3.\par
\par
defRec[\par
  foldRight [folder state seq] where: [[fun folder] [sequence seq]]\par
  doc: "Perform a right-associative fold over a sequence. NOTE: this function is not currently tail-recursive."\par
  if(isDone(seq)\par
     state\par
     let((elem peek(seq))\par
         (nextSeq next(seq))\par
         (nextState foldRight(folder state nextSeq))\par
         folder(elem nextState)))]\par
\par
object[\par
  anonymous\par
  class[bullet]\par
  while[value\{player.shoot\} && tally\{global.tick\} < 1000 && not(value\{my.collision\})]\par
  attributes[\par
    position[player.transform.position + \{v2 0f (aggregate\{global.tick (+ state bulletSpeed) 0f\})\}]\par
    #| and so on... |#]]\par
\par
object[\par
  currentScore\par
  class[intValue]\par
  attributes[\par
    value[\par
      aggregate\{any.enemy.health (+ state source.points) 0 when: source.health = 0\}]]]\par
}
 