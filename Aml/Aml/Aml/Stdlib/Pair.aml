; Aml Pair library.
; Copyright (C) Bryan Edds, 2012-2013.

[usingFile "Core.aml"]
[usingFile "Int.aml"]
[usingFile "List.aml"]
[usingFile "Sequence.aml"]
[usingFile "Array.aml"]

[struct pair [first second]
    doc: "Make a pair value."]

[def sliceWhen [pred seq] where: [[fun pred] [sequence seq]]
    doc: "Slice elements of a sequence in two parts, slicing at the first element that satisfies the predicate."
    (if (isDone seq)
        (pair (list) (list))
        (let (value (peek seq))
             (if (pred value)
                 (pair (list) (sequenceToList seq))
                 (let (nextSeq (next seq))
                      (nextResult (sliceWhen pred nextSeq))
                      (pair (cons value nextResult.first)
                            nextResult.second)))))]
    
[def slice [count seq] where: [[int count] [sequence seq]]
    doc: "Slice elements of a sequence in two parts, staring at the count'th element."
    pre: (isPositive count)
    (if (or (isZero count) (isDone seq))
        (pair (list) (sequenceToList seq))
        (let (value (peek seq))
             (nextSeq (next seq))
             (nextCount (dec count))
             (nextResult (slice nextCount nextSeq))
             (pair (cons value nextResult.first)
                   nextResult.second)))]
    
[def zipWith [zipper seq seq2] where: [[fun zipper] [sequence seq] [sequence seq2]]
    doc: "Zip two sequences with a given function."
    (if (or (isDone seq) (isDone seq2))
        (list)
        (let (value (peek seq))
             (value2 (peek seq2))
             (nextSeq (next seq))
             (nextSeq2 (next seq2))
             (cons (zipper value value2)
                   (zipWith zipper nextSeq nextSeq2))))]
    
[def zip [seq seq2] where: [[sequence seq] [sequence seq2]]
    doc: "Zip two sequences into a sequence of pairs."
    (zipWith
        (fun (first second) (pair first second))
        seq
        seq2)]
    
[def unzip [seq] where: [[sequence seq]]
    doc: "Unzip a sequence of pairs into a pair of sequences."
    (let
        (prRev
            (fold
                (fun (state current)
                    (pair (cons current.first state.first)
                          (cons current.second state.second)))
                (pair (list) (list))
                seq))
        (pair (reverse prRev.first) (reverse prRev.second)))]
    
[def partition [pred seq] where: [[fun pred] [sequence seq]]
    doc: "Parition a sequence into a pair of sequences."
    (if (isDone seq)
        (pair (list) (list))
        (let (value (peek seq))
             (nextSeq (next seq))
             (nextResult (partition pred nextSeq))
             (nextResultFirst nextResult.first)
             (nextResultSecond nextResult.second)
             (if (pred value)
                 (pair (cons value nextResultFirst) nextResultSecond)
                 (pair nextResultFirst (cons value nextResultSecond)))))]
                 
#|   Affirmations |#
    
[def prLst (list 0 5 10 15 20)]
[def prIncLst (list 1 6 11 16 21)]
[def prOnesLst (list 1 1 1 1 1)]
[def prLargeLst (list 15 20)]
[def prSmallLst (list 0 5 10)]
[def prMiddleLst (list 5 10 15)]
[def prPrLst (list (pair 0 5) (pair 5 10) (pair 10 15))]
[def prEvenLst (list 0 10 20)]
[def prOddLst (list 5 15)]
[def prPr (pair 0 5)]
    
[affirmation sliceWhenWorks
    (= (sliceWhen (fun (x) (> x 10)) prLst)
       (pair prSmallLst prLargeLst))]
    
[affirmation sliceWorks
    (= (slice 3 prLst)
       (pair prSmallLst prLargeLst))]
       
[affirmation subsequenceWorks
    (= (subsequence 1 4 prLst) prMiddleLst)]
    
[affirmation zipWithWorks
    (similar (zipWith + prLst prOnesLst) prIncLst)]
    
[affirmation zipWorks
    (= (zip prSmallLst prMiddleLst) prPrLst)]
    
[affirmation unzipWorks
    (= (unzip prPrLst) (pair prSmallLst prMiddleLst))]
    
[affirmation partitionWorks
    (= (partition isEven prLst)
       (pair prEvenLst prOddLst))]